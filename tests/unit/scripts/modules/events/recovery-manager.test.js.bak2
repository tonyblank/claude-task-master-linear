/**
 * Recovery Manager System Tests
 */

import { MockServiceRegistry } from '../../../../mocks/service-registry.js';
import { expectCalled, expectCalledWith, clearCalls } from '../../../../utils/test-helpers.js';

// Config manager mocking handled by MockServiceRegistry

// Circuit breaker mocking handled by MockServiceRegistry

// Health monitor mocking handled by MockServiceRegistry

// Error boundary mocking handled by MockServiceRegistry

import {
	RecoveryManager,
	RECOVERY_STRATEGY,
	RECOVERY_STATUS
} from '../../../../../scripts/modules/events/recovery-manager.js';

describe('RecoveryManager', () => {
	let recoveryManager;

	beforeEach(() => {
		// Mock clearing handled by MockServiceRegistry
		recoveryManager = new RecoveryManager({
			enableAutoRecovery: true,
			maxRecoveryAttempts: 2,
			recoveryInterval: 100, // Short for testing
			healthCheckInterval: 50, // Short for testing
			escalationThreshold: 2
		});
	});

	afterEach(() => {
		if (recoveryManager.isRunning) {
			recoveryManager.stop();
		}
	});

	describe('constructor', () => {
		test('should initialize with default configuration', () => {
			const manager = new RecoveryManager();
			expect(manager.config.enableAutoRecovery).toBe(true);
			expect(manager.isRunning).toBe(false);
			expect(manager.recoveryJobs.size).toBe(0);
		});

		test('should initialize with custom configuration', () => {
			const config = { maxRecoveryAttempts: 5, recoveryInterval: 30000 };
			const manager = new RecoveryManager(config);
			expect(manager.config.maxRecoveryAttempts).toBe(5);
			expect(manager.config.recoveryInterval).toBe(30000);
		});

		test('should register built-in recovery strategies', () => {
			expect(
				recoveryManager.strategies.has(RECOVERY_STRATEGY.IMMEDIATE_RETRY)
			).toBe(true);
			expect(
				recoveryManager.strategies.has(RECOVERY_STRATEGY.CIRCUIT_RESET)
			).toBe(true);
			expect(
				recoveryManager.strategies.has(RECOVERY_STRATEGY.BOUNDARY_RESET)
			).toBe(true);
			expect(recoveryManager.strategies.has(RECOVERY_STRATEGY.ESCALATION)).toBe(
				true
			);
		});
	});

	describe('start and stop methods', () => {
		test('should start recovery manager', () => {
			recoveryManager.start();

			expect(recoveryManager.isRunning).toBe(true);
			expect(recoveryManager.recoveryTimer).not.toBeNull();
			expect(recoveryManager.healthCheckTimer).not.toBeNull();
		});

		test('should not start if already running', () => {
			recoveryManager.start();
			const firstTimer = recoveryManager.recoveryTimer;

			recoveryManager.start(); // Try to start again

			expect(recoveryManager.recoveryTimer).toBe(firstTimer);
		});

		test('should stop recovery manager', () => {
			recoveryManager.start();
			recoveryManager.stop();

			expect(recoveryManager.isRunning).toBe(false);
			expect(recoveryManager.recoveryTimer).toBeNull();
			expect(recoveryManager.healthCheckTimer).toBeNull();
		});
	});

	describe('registerStrategy method', () => {
		test('should register custom recovery strategy', () => {
			const strategyFn = MockServiceRegistry.createMockFn().mockResolvedValue({ action: 'custom' });

			recoveryManager.registerStrategy('custom-strategy', strategyFn, {
				timeout: 5000,
				retries: 3
			});

			expect(recoveryManager.strategies.has('custom-strategy')).toBe(true);
			const strategy = recoveryManager.strategies.get('custom-strategy');
			expect(strategy.fn).toBe(strategyFn);
			expect(strategy.options.timeout).toBe(5000);
		});

		test('should throw error for non-function strategy', () => {
			expect(() => {
				recoveryManager.registerStrategy('invalid', 'not-a-function');
			}).toThrow('Recovery strategy must be a function');
		});
	});

	describe('triggerRecovery method', () => {
		test('should trigger manual recovery successfully', async () => {
			const strategyFn = MockServiceRegistry.createMockFn().mockResolvedValue({ action: 'recovered' });
			recoveryManager.registerStrategy('test-strategy', strategyFn);

			const result = await recoveryManager.triggerRecovery(
				'test-integration',
				'test-strategy'
			);

			expect(result.success).toBe(true);
			expect(result.strategy).toBe('test-strategy');
			expect(strategyFn).toHaveBeenCalledWith('test-integration', {});
			expect(recoveryManager.stats.totalRecoveries).toBe(1);
			expect(recoveryManager.stats.successfulRecoveries).toBe(1);
		});

		test('should handle recovery failure', async () => {
			const error = new Error('Recovery failed');
			const strategyFn = MockServiceRegistry.createMockFn().mockRejectedValue(error);
			recoveryManager.registerStrategy('failing-strategy', strategyFn);

			await expect(
				recoveryManager.triggerRecovery('test-integration', 'failing-strategy')
			).rejects.toThrow('Recovery failed');

			expect(recoveryManager.stats.totalRecoveries).toBe(1);
			expect(recoveryManager.stats.failedRecoveries).toBe(1);
		});

		test('should retry recovery on failure', async () => {
			const strategyFn = jest
				.fn()
				.mockRejectedValueOnce(new Error('First attempt failed'))
				.mockResolvedValueOnce({ action: 'recovered on retry' });

			recoveryManager.registerStrategy('retry-strategy', strategyFn);

			const result = await recoveryManager.triggerRecovery(
				'test-integration',
				'retry-strategy',
				{ maxAttempts: 2 }
			);

			// First call should fail and schedule a retry
			expect(result.success).toBe(false);
			expect(result.retrying).toBe(true);
			expect(strategyFn).toHaveBeenCalledTimes(1);

			// Wait for retry
			await new Promise((resolve) => setTimeout(resolve, 150));

			expect(strategyFn).toHaveBeenCalledTimes(2);
		});

		test('should escalate after exceeding threshold', async () => {
			const escalationHandler = MockServiceRegistry.createMockFn();
			recoveryManager.on('recovery:escalated', escalationHandler);

			const strategyFn = jest
				.fn()
				.mockRejectedValue(new Error('Persistent failure'));
			recoveryManager.registerStrategy('escalating-strategy', strategyFn);

			await expect(
				recoveryManager.triggerRecovery(
					'test-integration',
					'escalating-strategy',
					{ maxAttempts: 2 }
				)
			).rejects.toThrow();

			// Wait for all retry attempts
			await new Promise((resolve) => setTimeout(resolve, 300));

			expect(escalationHandler).toHaveBeenCalledWith(
				expect.objectContaining({
					integrationName: 'test-integration',
					attempts: 2
				})
			);
		});
	});

	describe('getRecoveryStatus method', () => {
		test('should return recovery status for integration', async () => {
			const strategyFn = MockServiceRegistry.createMockFn().mockResolvedValue({ action: 'recovered' });
			recoveryManager.registerStrategy('test-strategy', strategyFn);

			// Trigger recovery
			await recoveryManager.triggerRecovery(
				'test-integration',
				'test-strategy'
			);

			const status = recoveryManager.getRecoveryStatus('test-integration');

			expect(status).toBeDefined();
			expect(status.status).toBe(RECOVERY_STATUS.SUCCESS);
			expect(status.strategy).toBe('test-strategy');
			expect(status.attempts).toBe(1);
		});

		test('should return null for integration with no recovery history', () => {
			const status = recoveryManager.getRecoveryStatus('unknown-integration');
			expect(status).toBeNull();
		});

		test('should return most recent recovery for integration', async () => {
			const strategyFn = MockServiceRegistry.createMockFn().mockResolvedValue({ action: 'recovered' });
			recoveryManager.registerStrategy('test-strategy', strategyFn);

			// Trigger multiple recoveries
			await recoveryManager.triggerRecovery(
				'test-integration',
				'test-strategy'
			);
			await new Promise((resolve) => setTimeout(resolve, 10));
			await recoveryManager.triggerRecovery(
				'test-integration',
				'test-strategy'
			);

			const status = recoveryManager.getRecoveryStatus('test-integration');

			// Should return the most recent one
			expect(status.status).toBe(RECOVERY_STATUS.SUCCESS);
		});
	});

	describe('getStats method', () => {
		test('should return recovery statistics', async () => {
			const strategyFn = MockServiceRegistry.createMockFn().mockResolvedValue({ action: 'recovered' });
			recoveryManager.registerStrategy('test-strategy', strategyFn);

			await recoveryManager.triggerRecovery(
				'test-integration',
				'test-strategy'
			);

			const stats = recoveryManager.getStats();

			expect(stats.totalRecoveries).toBe(1);
			expect(stats.successfulRecoveries).toBe(1);
			expect(stats.failedRecoveries).toBe(0);
			expect(stats.isRunning).toBe(false);
			expect(stats.strategiesUsed).toHaveProperty('test-strategy');
		});
	});

	describe('cancelRecovery method', () => {
		test('should cancel in-progress recovery', async () => {
			const strategyFn = jest.fn(
				() => new Promise((resolve) => setTimeout(resolve, 1000))
			);
			recoveryManager.registerStrategy('slow-strategy', strategyFn);

			// Start recovery (don't await)
			const recoveryPromise = recoveryManager.triggerRecovery(
				'test-integration',
				'slow-strategy'
			);

			// Find the job ID
			const jobId = Array.from(recoveryManager.recoveryJobs.keys())[0];

			// Cancel the recovery
			const cancelled = recoveryManager.cancelRecovery(jobId);

			expect(cancelled).toBe(true);

			const job = recoveryManager.recoveryJobs.get(jobId);
			expect(job.status).toBe(RECOVERY_STATUS.CANCELLED);
		});

		test('should return false for non-existent or completed job', () => {
			const cancelled = recoveryManager.cancelRecovery('non-existent');
			expect(cancelled).toBe(false);
		});
	});

	describe('getRecoveryHistory method', () => {
		test('should return recovery history', async () => {
			const strategyFn = MockServiceRegistry.createMockFn().mockResolvedValue({ action: 'recovered' });
			recoveryManager.registerStrategy('test-strategy', strategyFn);

			await recoveryManager.triggerRecovery('integration1', 'test-strategy');
			await recoveryManager.triggerRecovery('integration2', 'test-strategy');

			const history = recoveryManager.getRecoveryHistory(10);

			expect(history).toHaveLength(2);
			expect(history[0].integrationName).toBeDefined();
			expect(history[0].outcome).toBe('success');
		});

		test('should limit history results', async () => {
			const strategyFn = MockServiceRegistry.createMockFn().mockResolvedValue({ action: 'recovered' });
			recoveryManager.registerStrategy('test-strategy', strategyFn);

			// Create multiple recovery records
			for (let i = 0; i < 5; i++) {
				await recoveryManager.triggerRecovery(
					`integration${i}`,
					'test-strategy'
				);
			}

			const limitedHistory = recoveryManager.getRecoveryHistory(3);
			expect(limitedHistory).toHaveLength(3);
		});
	});

	describe('auto recovery loop', () => {
		test('should trigger recovery for open circuit breakers', async () => {
			const {
				circuitBreakerRegistry
			} = require('../../../../../scripts/modules/events/circuit-breaker.js');
			circuitBreakerRegistry.getAllStatuses.mockReturnValue({
				'open-breaker': { state: 'open' }
			});

			const strategyFn = MockServiceRegistry.createMockFn().mockResolvedValue({ action: 'reset' });
			recoveryManager.registerStrategy(
				RECOVERY_STRATEGY.CIRCUIT_RESET,
				strategyFn
			);

			recoveryManager.start();

			// Wait for recovery loop to run
			await new Promise((resolve) => setTimeout(resolve, 150));

			expect(strategyFn).toHaveBeenCalledWith('open-breaker', {});
		});

		test('should trigger recovery for isolated boundaries', async () => {
			const {
				errorBoundaryRegistry
			} = require('../../../../../scripts/modules/events/error-boundary.js');
			errorBoundaryRegistry.getAllStatuses.mockReturnValue({
				'isolated-boundary': { isIsolated: true }
			});

			const strategyFn = MockServiceRegistry.createMockFn().mockResolvedValue({ action: 'recovered' });
			recoveryManager.registerStrategy(
				RECOVERY_STRATEGY.BOUNDARY_RESET,
				strategyFn
			);

			recoveryManager.start();

			// Wait for recovery loop to run
			await new Promise((resolve) => setTimeout(resolve, 150));

			expect(strategyFn).toHaveBeenCalledWith('isolated-boundary', {});
		});

		test('should not trigger duplicate recoveries', async () => {
			const {
				circuitBreakerRegistry
			} = require('../../../../../scripts/modules/events/circuit-breaker.js');
			circuitBreakerRegistry.getAllStatuses.mockReturnValue({
				'open-breaker': { state: 'open' }
			});

			const strategyFn = MockServiceRegistry.createMockFn().mockResolvedValue({ action: 'reset' });
			recoveryManager.registerStrategy(
				RECOVERY_STRATEGY.CIRCUIT_RESET,
				strategyFn
			);

			// Start first recovery manually
			await recoveryManager.triggerRecovery(
				'open-breaker',
				RECOVERY_STRATEGY.CIRCUIT_RESET
			);

			recoveryManager.start();

			// Wait for recovery loop to run
			await new Promise((resolve) => setTimeout(resolve, 150));

			// Should only be called once (from manual trigger, not auto)
			expect(strategyFn).toHaveBeenCalledTimes(1);
		});
	});

	describe('health check loop', () => {
		test('should trigger self-healing for critical issues', async () => {
			const {
				healthMonitor
			} = require('../../../../../scripts/modules/events/health-monitor.js');
			healthMonitor.getSystemHealth.mockReturnValue({
				status: 'critical',
				issues: [
					{
						check: 'critical-service',
						severity: 'critical'
					}
				]
			});

			const strategyFn = MockServiceRegistry.createMockFn().mockResolvedValue({ action: 'escalated' });
			recoveryManager.registerStrategy(
				RECOVERY_STRATEGY.ESCALATION,
				strategyFn
			);

			recoveryManager.start();

			// Wait for health check loop to run
			await new Promise((resolve) => setTimeout(resolve, 80));

			expect(strategyFn).toHaveBeenCalledWith('critical-service', {});
		});

		test('should emit health degraded events', async () => {
			const {
				healthMonitor
			} = require('../../../../../scripts/modules/events/health-monitor.js');
			healthMonitor.getSystemHealth.mockReturnValue({
				status: 'unhealthy',
				issues: [{ check: 'failing-service', severity: 'high' }]
			});

			const healthHandler = MockServiceRegistry.createMockFn();
			recoveryManager.on('health:degraded', healthHandler);

			recoveryManager.start();

			// Wait for health check loop to run
			await new Promise((resolve) => setTimeout(resolve, 80));

			expect(healthHandler).toHaveBeenCalledWith(
				expect.objectContaining({
					status: 'unhealthy',
					issues: expect.any(Array)
				})
			);
		});
	});

	describe('built-in recovery strategies', () => {
		test('should execute immediate retry strategy', async () => {
			const {
				errorBoundaryRegistry
			} = require('../../../../../scripts/modules/events/error-boundary.js');
			const mockBoundary = { reset: MockServiceRegistry.createMockFn() };
			errorBoundaryRegistry.getBoundary.mockReturnValue(mockBoundary);

			const strategy = recoveryManager.strategies.get(
				RECOVERY_STRATEGY.IMMEDIATE_RETRY
			);
			const result = await strategy.fn('test-integration', {});

			expect(result.action).toBe('boundary_reset');
			expect(mockBoundary.reset).toHaveBeenCalled();
		});

		test('should execute circuit reset strategy', async () => {
			const {
				circuitBreakerRegistry
			} = require('../../../../../scripts/modules/events/circuit-breaker.js');
			const mockBreaker = { reset: MockServiceRegistry.createMockFn() };
			circuitBreakerRegistry.getBreaker.mockReturnValue(mockBreaker);

			const strategy = recoveryManager.strategies.get(
				RECOVERY_STRATEGY.CIRCUIT_RESET
			);
			const result = await strategy.fn('test-integration', {});

			expect(result.action).toBe('circuit_breaker_reset');
			expect(mockBreaker.reset).toHaveBeenCalled();
		});

		test('should execute boundary reset strategy', async () => {
			const {
				errorBoundaryRegistry
			} = require('../../../../../scripts/modules/events/error-boundary.js');
			const mockBoundary = { recover: MockServiceRegistry.createMockFn() };
			errorBoundaryRegistry.getBoundary.mockReturnValue(mockBoundary);

			const strategy = recoveryManager.strategies.get(
				RECOVERY_STRATEGY.BOUNDARY_RESET
			);
			const result = await strategy.fn('test-integration', {});

			expect(result.action).toBe('boundary_recovered');
			expect(mockBoundary.recover).toHaveBeenCalledWith('auto_recovery');
		});

		test('should execute escalation strategy', async () => {
			const {
				errorBoundaryRegistry,
				circuitBreakerRegistry
			} = require('../../../../../scripts/modules/events/error-boundary.js');
			const mockBoundary = { reset: MockServiceRegistry.createMockFn() };
			const mockBreaker = { reset: MockServiceRegistry.createMockFn() };

			errorBoundaryRegistry.getBoundary.mockReturnValue(mockBoundary);
			circuitBreakerRegistry.getBreaker.mockReturnValue(mockBreaker);

			const strategy = recoveryManager.strategies.get(
				RECOVERY_STRATEGY.ESCALATION
			);
			const result = await strategy.fn('test-integration', {});

			expect(result.action).toBe('escalation_reset');
			expect(result.components).toEqual(['boundary', 'circuit_breaker']);
			expect(mockBoundary.reset).toHaveBeenCalled();
			expect(mockBreaker.reset).toHaveBeenCalled();
		});
	});

	describe('event handling', () => {
		test('should emit recovery started events', async () => {
			const handler = MockServiceRegistry.createMockFn();
			recoveryManager.on('recovery:started', handler);

			const strategyFn = MockServiceRegistry.createMockFn().mockResolvedValue({ action: 'recovered' });
			recoveryManager.registerStrategy('test-strategy', strategyFn);

			await recoveryManager.triggerRecovery(
				'test-integration',
				'test-strategy'
			);

			expect(handler).toHaveBeenCalledWith(
				expect.objectContaining({
					integrationName: 'test-integration',
					strategy: 'test-strategy',
					attempt: 1
				})
			);
		});

		test('should emit recovery completed events', async () => {
			const handler = MockServiceRegistry.createMockFn();
			recoveryManager.on('recovery:completed', handler);

			const strategyFn = MockServiceRegistry.createMockFn().mockResolvedValue({ action: 'recovered' });
			recoveryManager.registerStrategy('test-strategy', strategyFn);

			await recoveryManager.triggerRecovery(
				'test-integration',
				'test-strategy'
			);

			expect(handler).toHaveBeenCalledWith(
				expect.objectContaining({
					integrationName: 'test-integration',
					strategy: 'test-strategy',
					duration: expect.any(Number)
				})
			);
		});

		test('should emit recovery failed events', async () => {
			const handler = MockServiceRegistry.createMockFn();
			recoveryManager.on('recovery:failed', handler);

			const strategyFn = jest
				.fn()
				.mockRejectedValue(new Error('Recovery failed'));
			recoveryManager.registerStrategy('failing-strategy', strategyFn);

			await expect(
				recoveryManager.triggerRecovery('test-integration', 'failing-strategy')
			).rejects.toThrow();

			expect(handler).toHaveBeenCalledWith(
				expect.objectContaining({
					integrationName: 'test-integration',
					strategy: 'failing-strategy',
					error: 'Recovery failed'
				})
			);
		});
	});
});
